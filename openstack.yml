---
- name: install openstack using ansible
  hosts: openstack
  handlers:
   - name: restart iptables service
     service:
       name: iptables
       state: restarted
  tasks:
  - name: Install mariadb-galera-server  package
    yum:
      name: mariadb-galera-server
      state: installed

  - name: Add iptables rule for Mariadb
    iptables: 
      chain: INPUT
      protocol: tcp
      action: append
      match: mutiport
      destination_port: 3306
      jump: ACCEPT
    notify: restart iptables

  - name: restart mariadb service
    service:
      name: mariadb
      state: restarted

  - name: Changing root password for all root accounts
    mysql_user: name=root host={{ item }} password={{ mysql_root_password }}
    with_items:
        - $ansible_hostname
        - 127.0.0.1
        - ::1
        - localhost

  - name: delete anonymous MySQL server user for $server_hostname
    action: mysql_user user="" host=$server_hostname  state="absent"

  - name: delete anonymous MySQL server user for localhost
    action: mysql_user user="" state="absent"

  - name: Install rabbitmq-server  package
    yum:
      name: rabbitmq-server
      state: installed

  - name: Add iptables rule for rabbitmq
    iptables:
      chain: INPUT
      protocol: tcp
      action: append
      match: tcp
      destination_port: 5672
      jump: ACCEPT
    notify: restart iptables

  - name: restart mariadb service
    service:
      name: mariadb
      state: restarted

  - name: enable mariadb service
    service:
      name: mariadb
      state: enabled

  - name: change rabbitmq guest user password
    rabbitmq_user:
    user: guest
    password: {{ NEW_RABBITMQ_PASS }}
    force: yes
    state: present

  - name: add openstack users to rabbitmq
    rabbitmq_user:
    user: {{item}}
    password: {{ RABBITMQ_USERS_PASS }}
    vhost: /
    configure_priv: .*
    read_priv: .*
    write_priv: .*
    state: present
    with_items:
         - cinder
         - nova
         - heat
         - glance
         - ceilometer
         - neutron
  - name: Install the OpenStack services softwares
    yum:
      name: {{item}}
      state: installed
      with_items:
           - python-openstackclient
           - openstack-glance
           - 
           - 
           - 
           - 
           - 
           - 
           - 
           - openstack-keystone
           - openstack-utils
           - openstack-selinux
           - httpd
           - mod_wsgi

  - name: Create a new databases with openstack services name
    mysql_db:
    name: {{item}}
    state: present
    with_items:
         - cinder
         - nova
         - heat
         - glance
         - ceilometer
         - neutron
         - keystone

  - name: create openstack services users with permission
    mysql_user:
    name: {{item}}
    password: {{OPENSTACK_USERS_PASS}}
    priv: '{{item}}.*:ALL,GRANT'
    state: present
    with_items:
         - cinder
         - nova
         - heat
         - glance
         - ceilometer
         - neutron
         - keystone

  - name: Configuring the Identity Service SQL Database Connection
    command: openstack-config --set /etc/keystone/keystone.conf sql connection mysql://keystone:{{OPENSTACK_USERS_PASS}}@{{ansible_hostname}}/keystone
    register: keystoneconfoutput

  - name: Configuring the Fernet token provider for keystone
    command: openstack-config --set /etc/keystone/keystone.conf token provider fernet
    register: keystoneconfoutput2

  - name: Configuring the Firewall to Allow Identity Service Traffic
    iptables:
      chain: INPUT
      protocol: tcp
      action: append
      match: multiport
      destination_port: 5000,35357
      jump: ACCEPT
    notify: restart iptables

  - name: Ensure that the keystone user owns the /var/log/keyston
    file:
    path: /var/log/keystone
    state: directory
    owner: keystone
    group: keystone
    recurse: yes

  - name: Populating the Identity Service Database keystone-manage db_sync
    command: keystone-manage db_sync
    become: true
    become_method: su
    become_user: keystone
    become_flags: '-s /bin/sh'

  - name: Initialize Fernet key repositories command1
    command: keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone
    register: keystoneconfoutput3

  - name: Initialize Fernet key repositories command2
    command: keystone-manage credential_setup --keystone-user keystone --keystone-group keystone
    register: keystoneconfoutput4

  - name: Limiting the Number of Entities in a Collection
    command: openstack-config --set /etc/keystone/keystone.conf assignment list_limit 100

  - name: Configuring the Appache HTTP server add ServerName to conf file
    lineinfile:
      path: /etc/httpd/conf/httpd.conf
      line: 'ServerName {{ansible_hostname}}'
      state: present

  - name: Configuring the Appache HTTP server add link conf files
    file:
      src: /usr/share/keystone/wsgi-keystone.conf
      dest: /etc/httpd/conf.d
      state: link

  - name: start apache service
    service:
      name: httpd
      state: restarted

  - name: enable apache service
    service:
      name: httpd
      state: enabled

  - name: Create an admin user, role, and tenant
    command: keystone-manage bootstrap --bootstrap-password {{KEYSTONE_ADMIN_PASSWD}} --bootstrap-username admin --bootstrap-project-name admin --bootstrap-role-name admin --bootstrap-service-name keystone --bootstrap-region-id RegionOne --bootstrap-admin-url http://{{ansible_hostname}}:35357 --bootstrap-public-url http://{{ansible_hostname}}:5000 --bootstrap-internal-url http://{{ansible_hostname}}:5000

  - name: create keystonerc_admin file
    lineinfile:
      path: /root/keystonerc_admin
      state: present
      create: yes
      line: "export OS_USERNAME=admin"
      line: "export OS_PROJECT_NAME=admin"
      line: "export OS_PASSWORD={{KEYSTONE_ADMIN_PASSWD}}"
      line: "export OS_AUTH_URL=http://{{ansible_hostname}}:35357/v2.0/"
      line: "export PS1='[\u@\h \W(keystone_admin)]\$ '"

  - name: create openstack endpoint in region one
    sudo: no   
    shell: source /root/keystonerc_admin && openstack endpoint create --region RegionOne --publicurl http://{{ansible_hostname}}:5000 --adminurl http://{{ansible_hostname}}:35357 --internalurl http://{{ansible_hostname}}:5000 keystone
    args:
       executable: /bin/bash

  - name: create openstack project admin and services
    sudo: no
    shell: source /root/keystonerc_admin && openstack project create admin && openstack project create --description "Services Tenant" services
    args:
       executable: /bin/bash

  - name: Set the value of sql_connection configuration key in glance conf files
    command: openstack-config --set /etc/glance/glance-{{item}}.conf DEFAULT sql_connection mysql://glance:{{OPENSTACK_USERS_PASS}}@{{ansible_hostname}}/glance
    with_items:
         - api
         - registry

  - name: create openstack glance user
    sudo: no
    shell: source /root/keystonerc_admin && openstack user create --password {{OPENSTACK_USERS_PASS}} glance && openstack role add --project services --user glance admin && openstack service create --name glance --description "Glance Service" image
    args:
       executable: /bin/bash

  - name: create openstack service glance endpoint
    sudo: no
    shell: source /root/keystonerc_admin && openstack endpoint create --publicurl 'http://{{ansible_hostname}}:9292' --adminurl 'http://{{ansible_hostname}}:9292' --internalurl 'http://{{ansible_hostname}}:9292' --region RegionOne glance
    args:
       executable: /bin/bash

  - name: Configure the glance-api service
    command: openstack-config --set /etc/glance/glance-api.conf {{item.name1}} {{item.name2}} {{item.name3}}
    with_items:
      - { name1: 'paste_deploy', name2: 'flavor', name3: 'keystone' }
      - { name1: 'keystone_authtoken', name2: 'auth_host', name3: '{{ansible_hostname}}' }
      - { name1: 'keystone_authtoken', name2: 'auth_port', name3: '35357' }
      - { name1: 'keystone_authtoken', name2: 'auth_protocol', name3: 'http' }
      - { name1: 'keystone_authtoken', name2: 'admin_tenant_name', name3: 'services' }
      - { name1: 'keystone_authtoken', name2: 'admin_user', name3: 'glance' }
      - { name1: 'keystone_authtoken', name2: 'admin_password', name3: '{{KEYSTONE_ADMIN_PASSWD}}' }

  - name: Configure the glance-registry service
    command: openstack-config --set /etc/glance/glance-registry.conf {{item.name1}} {{item.name2}} {{item.name3}}
    with_items:
      - { name1: 'paste_deploy', name2: 'flavor', name3: 'keystone' }
      - { name1: 'keystone_authtoken', name2: 'auth_host', name3: '{{ansible_hostname}}' }
      - { name1: 'keystone_authtoken', name2: 'auth_port', name3: '35357' }
      - { name1: 'keystone_authtoken', name2: 'auth_protocol', name3: 'http' }
      - { name1: 'keystone_authtoken', name2: 'admin_tenant_name', name3: 'services' }
      - { name1: 'keystone_authtoken', name2: 'admin_user', name3: 'glance' }
      - { name1: 'keystone_authtoken', name2: 'admin_password', name3: '{{KEYSTONE_ADMIN_PASSWD}}' }


  - name: Configuring the Firewall to Allow Image Service Traffic in glance-api.conf
    lineinfile:
      path: /etc/glance/glance-api.conf
      state: present
      create: yes
      line: "bind_host = 0.0.0.0"
      line: "bind_port = 9292"

  - name: Configuring the Firewall to Allow Identity Service Traffic
    iptables:
      chain: INPUT
      protocol: tcp
      action: append
      match: multiport
      destination_port: 9292
      jump: ACCEPT
    notify: restart iptables

  - name: Configure RabbitMQ Message Broker Settings for the Image Service in /etc/glance/glance-api.conf
    command: openstack-config --set /etc/glance/glance-api.conf {{item.name1}} {{item.name2}} {{item.name3}}
    with_items:
      - { name1: 'DEFAULT', name2: 'notification_driver', name3: 'messaging' }
      - { name1: 'DEFAULT', name2: 'rabbit_host', name3: 'RABBITMQ_HOST' }
      - { name1: 'DEFAULT', name2: 'rabbit_port', name3: '5672' }
      - { name1: 'DEFAULT', name2: 'rabbit_userid', name3: 'glance' }
      - { name1: 'DEFAULT', name2: 'rabbit_password', name3: 'GLANCE_PASS' }
      - { name1: 'DEFAULT', name2: 'rabbit_virtual_host', name3: '/' }

  - name: Populating the Image Service Database
    command: glance-manage db_sync
    become: true
    become_method: su
    become_user: glance
    become_flags: '-s /bin/sh'

  - name: Create a unique ID for the mount point
    command: uuidgen
    register: UID

  - name: Create a file with the json extension
    blockinfile:
      path: /root/uid.json
      block: |
        {
        "id": "{{UID}}"
        "mountpoint": "/"
        }
  - name: Configure the Image service to use this JSON file command1
    command: openstack-config --set /etc/glance/glance-api.conf DEFAULT show_multiple_locations True

  - name: Configure the Image service to use this JSON file command2
    command: openstack-config --set /etc/glance/glance-api.conf DEFAULT filesystem_store_metadata_file  /root/uid.json

  - name: find FILESYSTEM var value
    command: df -hT |awk '{print $1}' | grep /dev/ | grep 1
    register: FILESYSTEM

  - name: Configure RabbitMQ Message Broker Settings for the Image Service in /etc/glance/glance-api.conf
    command: openstack-config --set /etc/glance/glance-api.conf {{item.name1}} {{item.name2}} {{item.name3}}
    with_items:
      - { name1: 'DEFAULT', name2: 'allowed_direct_url_schemes', name3: 'file' }
      - { name1: 'image_file_url', name2: 'filesystems', name3: '{{FILESYSTEM}}' }
      - { name1: 'image_file_url:{{FILESYSTEM}}', name2: 'id', name3: '{{UID}}' }
      - { name1: 'image_file_url:{{FILESYSTEM}}', name2: 'mountpoint', name3: '/' }

  - name: restart service openstack-glance-registry
    service:
      name: openstack-glance-registry
      state: restarted

  - name: restart service openstack-glance-api
    service:
      name: openstack-glance-api
      state: restarted

  - name: enable service openstack-glance-registry
    service:
      name: openstack-glance-registry
      state: enabled

  - name: enable service openstack-glance-api
    service:
      name: openstack-glance-api
      state: enabled




## completed till h.4.2 
## not doing swift
    
  
#    command: iptables -A INPUT -p tcp -m multiport --dports 3306 -j ACCEPT
#  - name: Install mariadb(SQL database)  packages
#    yum: name={{item}} state=removed
#    with_items:
#         - mariadb
#         - mariadb-server
#         - python2-PyMySQL

